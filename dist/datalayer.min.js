!function(){function datalayer($rootScope,$http,$q){function ResourceFactory(configuration){function checkType(obj){return{}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function Resource(data){angular.extend(this||{},data)}var config={url:".",model:"",version:"v1",id_reference:"id",request:{query:{method:"GET"},get:{method:"GET"},all:{method:"GET"},$save:{method:"POST"},$update:{method:"PUT"},"delete":{method:"DELETE"}}};return angular.extend(config,configuration||{}),config.request.query.url=config.url+"/"+config.version+"/"+config.model,config.request.get.url=config.url+"/"+config.version+"/"+config.model,config.request.all.url=config.url+"/"+config.version+"/"+config.model,config.request.$save.url=config.url+"/"+config.version+"/"+config.model,config.request.$update.url=config.url+"/"+config.version+"/"+config.model,config.request["delete"].url=config.url+"/"+config.version+"/"+config.model,Resource.prototype={$save:function(conf){var regex,defer=$q.defer(),self=this;return this[config.id_reference]?(regex=new RegExp("/"+this.id),config.request.$update.data=this,regex.test(config.request.$update.url)||(config.request.$update.url+="/"+this.id),conf&&angular.extend(config.request.$update,conf),$http(config.request.$update).then(function(data){Resource.$trigger("dl-save",self),Resource.$trigger("dl-"+config.model+".save",self),defer.resolve(self)},function(error){Resource.$trigger("dl-save",error),Resource.$trigger("dl-"+config.model+".save",error),defer.reject(error)})):(config.request.$save.data=this,conf&&angular.extend(config.request.$save,conf),$http(config.request.$save).then(function(result){self.id=result.data,Resource.$trigger("dl-save",self),Resource.$trigger("dl-"+config.model+".save",self),defer.resolve(self)},function(error){Resource.$trigger("dl-save",error),Resource.$trigger("dl-"+config.model+".save",error),defer.reject(error)})),defer.promise}},Resource.query=function(filter,isArray,conf){var defer=$q.defer(),data=[];return isArray="undefined"!=typeof isArray?isArray:!0,config.request.query.params=filter,conf&&angular.extend(config.request.query,conf),$http(config.request.query).then(function(result){isArray?angular.forEach(result.data,function(object){data.push(new Resource(object))}):data=result.data,defer.resolve(data)},function(error){defer.reject(error)}),defer.promise},Resource.get=function(params,conf){var regex,defer=$q.defer(),promises=[],data=[],_config={};return params.id||defer.reject("Expecting id for the operation"),"array"===checkType(params.id)?angular.forEach(params.id,function(id){_config=angular.copy(config.request.get),_config.url+="/"+id,conf&&anguar.extend(_config,conf),promises.push($http(_config))}):(regex=new RegExp("/"+this.id),regex.test(config.request.get.url)||(config.request.get.url+="/"+this.id),conf&&anguar.extend(config.request.get,conf),promises.push($http(config.request.get))),$q.all(promises).then(function(results){1===results.length?data=new Resource(results[0].data):angular.forEach(results,function(result){data.push(new Resource(result.data))}),defer.resolve(data)},function(error){defer.reject(error)}),defer.promise},Resource.all=function(conf){var defer=$q.defer(),data=[];return conf&&angular.extend(config.request.all,conf),$http(config.request.all).then(function(result){angular.forEach(result.data,function(object){data.push(new Resource(object))}),defer.resolve(data)},function(error){defer.reject(error)}),defer.promise},Resource["delete"]=function(params,conf){var defer=$q.defer();return params&&!params.id&&defer.reject({error:"Expecting id for the operation"}),config.request["delete"].url+="/"+params.id,conf&&angular.extend(config.request["delete"],conf),$http(config.request["delete"]).then(function(data){Resource.$trigger("dl-delete",data),Resource.$trigger("dl-"+config.model+".delete",data),defer.resolve(data)},function(error){Resource.$trigger("dl-delete",self),Resource.$trigger("dl-"+config.model+".delete",error),defer.reject(error)}),defer.promise},Resource.$on=function(topic,func){topics[topic]||(topics[topic]=[]);var token=(++subUid).toString();return topics[topic].push({token:token,func:func}),token},Resource.$trigger=function(topic,args){return topics[topic]?(setTimeout(function(){for(var subscribers=topics[topic],len=subscribers?subscribers.length:0;len--;)subscribers[len].func(args)},0),!0):!1},Resource.$off=function(token){for(var m in topics)if(topics[m])for(var i=0,j=topics[m].length;j>i;i++)if(topics[m][i].token===token)return topics[m].splice(i,1),token;return!1},Resource}var topics={},subUid=-1;return ResourceFactory}angular.module("angular-datalayer",[]).factory("datalayer",datalayer),datalayer.$inject=["$rootScope","$http","$q"]}();